#!/bin/bash

hname=slimhub
nuser=2
creds=""

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--hubname)
      hname="$2"
      shift # past argument
      shift # past value
      ;;
    -n|--nuser)
      nuser="$2"
      shift # past argument
      shift # past value
      ;;
    -c|--creds)
      creds="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option
      shift # past argument
      shift # past value
      ;;
  esac
done

rname=${hname}RG

# Infer disk size from number of users
let "mem = 32 + 2 * $nuser"
echo "Starting a JupyterHub $hname for $nuser users with $mem Gb of disk space"
# decide on VM size (nCPU, RAM) depending on number of users
next2=$( echo "x=l(2*$nuser)/l(2); scale=0; 2^((x+1.5)/1)" | bc -l; )
ncpu=$((next2 < 120 ? next2 : 120))

if [[ $ncpu -gt 72 ]]; then
  vm_size="Standard_HB120rs_v3"
else
  vm_size="Standard_F${ncpu}s_v2"
fi

echo "MaxDataDiskCount    MemoryInMb    Name                    NumberOfCores    OsDiskSizeInMb    ResourceDiskSizeInMb"
echo "------------------  ------------  ----------------------  ---------------  ----------------  ----------------------"
az vm list-sizes --location eastus -o table | grep ${vm_size}

# Creates an azure vm with the littlest jupytehub for tutorials
# Size is defined based on number odf expected users
# run as `./setup_slimhub.sh -h name -n 4`

# generate the cloud-init setup file
echo "Create cloud-init file"
domain="$hname.eastus.cloudapp.azure.com"
bash cloud_init $domain $creds

# create separate resource group for easy cleanup
echo "Create resource group"
az group create -l eastus -n $rname > grplog
rm grplog

# Setup https
echo "Create network security group and rules"
az network nsg create -g $rname -n ${rname}NSG > nsglog

# Inbound http. This is needed for ssl certificate creation
az network nsg rule create \
  -g $rname \
  -n "Allow Web Port" \
  --nsg-name ${rname}NSG \
  --access Allow \
  --direction Inbound \
  --priority 110 \
  --source-address-prefix Internet \
  --source-port-range "*" \
  --destination-address-prefix "*" \
  --destination-port-ranges 80 > nsglog

# Inbound https for users
az network nsg rule create \
  -g $rname \
  -n "Allow Https" \
  --nsg-name ${rname}NSG \
  --access Allow \
  --direction Inbound \
  --priority 150 \
  --source-address-prefix Internet \
  --source-port-range "*" \
  --destination-address-prefix "*" \
  --destination-port-ranges 443 > nsglog

# ssh for admin
az network nsg rule create \
  --resource-group $rname \
  --nsg-name  ${rname}NSG \
  --name "Allow SSH" \
  --access Allow \
  --protocol Tcp \
  --direction Inbound \
  --priority 300 \
  --source-address-prefix Internet \
  --source-port-range "*" \
  --destination-address-prefix "*" \
  --destination-port-range 22 > nsglog


rm nsglog

# Create vm
echo "Create VM"
az vm create --resource-group $rname \
  --name $hname \
  --size $vm_size \
  --image Canonical:0001-com-ubuntu-server-focal:20_04-lts:latest \
  --admin-username slimazure \
  --generate-ssh-keys \
  --location eastus \
  --nsg ${rname}NSG \
  --os-disk-size-gb $mem \
  --public-ip-sku Standard \
  --public-ip-address-dns-name $hname \
  --custom-data cloud-init-slimhub.yaml > vmlog

IP=$(cat vmlog | grep "publicIpAddress" | grep -o "[0-9.]\+")
echo "ssh slimazure@$IP"
rm vmlog

# Domain name
echo "Access the jupyterhub at https://$domain"

# create cleanup file
echo "Generate cleanup script"
if [ -f cleanup_slimhub ]; then
  rm cleanup_slimhub
fi;

tee -a cleanup_slimhub > /dev/null <<EOT
#!/bin/bash
az group delete -n $rname --yes
EOT

chmod +x cleanup_slimhub

status=$(ssh -oStrictHostKeyChecking=accept-new $slimazure@$IP 'cat /var/log/cloud-init-output.log | grep "finished at"')
while [ -z "$status" ]
do
  echo "Waiting for startup to be done"
  sleep 15
  status=$(ssh $VM_USER@$IP 'cat /var/log/cloud-init-output.log | grep "finished at"')
done
echo "Hub is ready"